{"dependencies":[{"name":"/home/nick/Desktop/Code/Learn-Redux-Starter-Files/test-app/node_modules/react-dom/package.json","includedInParent":true,"mtime":1530981824985},{"name":"/home/nick/Desktop/Code/Learn-Redux-Starter-Files/test-app/package.json","includedInParent":true,"mtime":1530984832683},{"name":"/home/nick/Desktop/Code/Learn-Redux-Starter-Files/test-app/.babelrc","includedInParent":true,"mtime":1530987324534},{"name":"./SyntheticUIEvent","loc":{"line":11,"column":31},"parent":"/home/nick/Desktop/Code/Learn-Redux-Starter-Files/test-app/node_modules/react-dom/lib/SyntheticKeyboardEvent.js","resolved":"/home/nick/Desktop/Code/Learn-Redux-Starter-Files/test-app/node_modules/react-dom/lib/SyntheticUIEvent.js"},{"name":"./getEventCharCode","loc":{"line":13,"column":31},"parent":"/home/nick/Desktop/Code/Learn-Redux-Starter-Files/test-app/node_modules/react-dom/lib/SyntheticKeyboardEvent.js","resolved":"/home/nick/Desktop/Code/Learn-Redux-Starter-Files/test-app/node_modules/react-dom/lib/getEventCharCode.js"},{"name":"./getEventKey","loc":{"line":14,"column":26},"parent":"/home/nick/Desktop/Code/Learn-Redux-Starter-Files/test-app/node_modules/react-dom/lib/SyntheticKeyboardEvent.js","resolved":"/home/nick/Desktop/Code/Learn-Redux-Starter-Files/test-app/node_modules/react-dom/lib/getEventKey.js"},{"name":"./getEventModifierState","loc":{"line":15,"column":36},"parent":"/home/nick/Desktop/Code/Learn-Redux-Starter-Files/test-app/node_modules/react-dom/lib/SyntheticKeyboardEvent.js","resolved":"/home/nick/Desktop/Code/Learn-Redux-Starter-Files/test-app/node_modules/react-dom/lib/getEventModifierState.js"}],"generated":{"js":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar SyntheticUIEvent = require('./SyntheticUIEvent');\n\nvar getEventCharCode = require('./getEventCharCode');\nvar getEventKey = require('./getEventKey');\nvar getEventModifierState = require('./getEventModifierState');\n\n/**\n * @interface KeyboardEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar KeyboardEventInterface = {\n  key: getEventKey,\n  location: null,\n  ctrlKey: null,\n  shiftKey: null,\n  altKey: null,\n  metaKey: null,\n  repeat: null,\n  locale: null,\n  getModifierState: getEventModifierState,\n  // Legacy Interface\n  charCode: function (event) {\n    // `charCode` is the result of a KeyPress event and represents the value of\n    // the actual printable character.\n\n    // KeyPress is deprecated, but its replacement is not yet final and not\n    // implemented in any major browser. Only KeyPress has charCode.\n    if (event.type === 'keypress') {\n      return getEventCharCode(event);\n    }\n    return 0;\n  },\n  keyCode: function (event) {\n    // `keyCode` is the result of a KeyDown/Up event and represents the value of\n    // physical keyboard key.\n\n    // The actual meaning of the value depends on the users' keyboard layout\n    // which cannot be detected. Assuming that it is a US keyboard layout\n    // provides a surprisingly accurate mapping for US and European users.\n    // Due to this, it is left to the user to implement at this time.\n    if (event.type === 'keydown' || event.type === 'keyup') {\n      return event.keyCode;\n    }\n    return 0;\n  },\n  which: function (event) {\n    // `which` is an alias for either `keyCode` or `charCode` depending on the\n    // type of the event.\n    if (event.type === 'keypress') {\n      return getEventCharCode(event);\n    }\n    if (event.type === 'keydown' || event.type === 'keyup') {\n      return event.keyCode;\n    }\n    return 0;\n  }\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);\n\nmodule.exports = SyntheticKeyboardEvent;","map":null},"hash":"94cefd0181a32433cef96189430bb281","cacheData":{"env":{}},"id":580}