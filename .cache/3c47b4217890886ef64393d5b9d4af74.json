{"dependencies":[{"name":"/home/nick/Desktop/Code/Learn-Redux-Starter-Files/test-app/node_modules/fbjs/package.json","includedInParent":true,"mtime":1530981824986},{"name":"/home/nick/Desktop/Code/Learn-Redux-Starter-Files/test-app/package.json","includedInParent":true,"mtime":1530984832683},{"name":"/home/nick/Desktop/Code/Learn-Redux-Starter-Files/test-app/.babelrc","includedInParent":true,"mtime":1530987324534},{"name":"./ExecutionEnvironment","loc":{"line":14,"column":35},"parent":"/home/nick/Desktop/Code/Learn-Redux-Starter-Files/test-app/node_modules/fbjs/lib/createNodesFromMarkup.js","resolved":"/home/nick/Desktop/Code/Learn-Redux-Starter-Files/test-app/node_modules/fbjs/lib/ExecutionEnvironment.js"},{"name":"./createArrayFromMixed","loc":{"line":16,"column":35},"parent":"/home/nick/Desktop/Code/Learn-Redux-Starter-Files/test-app/node_modules/fbjs/lib/createNodesFromMarkup.js","resolved":"/home/nick/Desktop/Code/Learn-Redux-Starter-Files/test-app/node_modules/fbjs/lib/createArrayFromMixed.js"},{"name":"./getMarkupWrap","loc":{"line":17,"column":28},"parent":"/home/nick/Desktop/Code/Learn-Redux-Starter-Files/test-app/node_modules/fbjs/lib/createNodesFromMarkup.js","resolved":"/home/nick/Desktop/Code/Learn-Redux-Starter-Files/test-app/node_modules/fbjs/lib/getMarkupWrap.js"},{"name":"./invariant","loc":{"line":18,"column":24},"parent":"/home/nick/Desktop/Code/Learn-Redux-Starter-Files/test-app/node_modules/fbjs/lib/createNodesFromMarkup.js","resolved":"/home/nick/Desktop/Code/Learn-Redux-Starter-Files/test-app/node_modules/fbjs/lib/invariant.js"}],"generated":{"js":"'use strict';\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n */\n\n/*eslint-disable fb-www/unsafe-html*/\n\nvar ExecutionEnvironment = require('./ExecutionEnvironment');\n\nvar createArrayFromMixed = require('./createArrayFromMixed');\nvar getMarkupWrap = require('./getMarkupWrap');\nvar invariant = require('./invariant');\n\n/**\n * Dummy container used to render all markup.\n */\nvar dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;\n\n/**\n * Pattern used by `getNodeName`.\n */\nvar nodeNamePattern = /^\\s*<(\\w+)/;\n\n/**\n * Extracts the `nodeName` of the first element in a string of markup.\n *\n * @param {string} markup String of markup.\n * @return {?string} Node name of the supplied markup.\n */\nfunction getNodeName(markup) {\n  var nodeNameMatch = markup.match(nodeNamePattern);\n  return nodeNameMatch && nodeNameMatch[1].toLowerCase();\n}\n\n/**\n * Creates an array containing the nodes rendered from the supplied markup. The\n * optionally supplied `handleScript` function will be invoked once for each\n * <script> element that is rendered. If no `handleScript` function is supplied,\n * an exception is thrown if any <script> elements are rendered.\n *\n * @param {string} markup A string of valid HTML markup.\n * @param {?function} handleScript Invoked once for each rendered <script>.\n * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.\n */\nfunction createNodesFromMarkup(markup, handleScript) {\n  var node = dummyNode;\n  !!!dummyNode ? undefined !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;\n  var nodeName = getNodeName(markup);\n\n  var wrap = nodeName && getMarkupWrap(nodeName);\n  if (wrap) {\n    node.innerHTML = wrap[1] + markup + wrap[2];\n\n    var wrapDepth = wrap[0];\n    while (wrapDepth--) {\n      node = node.lastChild;\n    }\n  } else {\n    node.innerHTML = markup;\n  }\n\n  var scripts = node.getElementsByTagName('script');\n  if (scripts.length) {\n    !handleScript ? undefined !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;\n    createArrayFromMixed(scripts).forEach(handleScript);\n  }\n\n  var nodes = Array.from(node.childNodes);\n  while (node.lastChild) {\n    node.removeChild(node.lastChild);\n  }\n  return nodes;\n}\n\nmodule.exports = createNodesFromMarkup;","map":null},"hash":"b36e5be0649c3b47d931f640c17f53bf","cacheData":{"env":{}},"id":665}