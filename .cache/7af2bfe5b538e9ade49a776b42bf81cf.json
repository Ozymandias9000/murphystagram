{"dependencies":[{"name":"/home/nick/Desktop/Code/Learn-Redux-Starter-Files/test-app/package.json","includedInParent":true,"mtime":1530984832683},{"name":"/home/nick/Desktop/Code/Learn-Redux-Starter-Files/test-app/.babelrc","includedInParent":true,"mtime":1530987324534},{"name":"../config/firebase","loc":{"line":1,"column":25},"parent":"/home/nick/Desktop/Code/Learn-Redux-Starter-Files/test-app/client/actions/actionCreators.js","resolved":"/home/nick/Desktop/Code/Learn-Redux-Starter-Files/test-app/client/config/firebase.js"},{"name":"react-router","loc":{"line":2,"column":31},"parent":"/home/nick/Desktop/Code/Learn-Redux-Starter-Files/test-app/client/actions/actionCreators.js","resolved":"/home/nick/Desktop/Code/Learn-Redux-Starter-Files/test-app/node_modules/react-router/lib/index.js"},{"name":"shortid","loc":{"line":3,"column":24},"parent":"/home/nick/Desktop/Code/Learn-Redux-Starter-Files/test-app/client/actions/actionCreators.js","resolved":"/home/nick/Desktop/Code/Learn-Redux-Starter-Files/test-app/node_modules/shortid/index.js"}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.increment = increment;\nexports.incrementSuccess = incrementSuccess;\nexports.incrementFailure = incrementFailure;\nexports.addPost = addPost;\nexports.addPostSuccess = addPostSuccess;\nexports.addPostFailure = addPostFailure;\nexports.addComment = addComment;\nexports.addCommentSuccess = addCommentSuccess;\nexports.addCommentFailure = addCommentFailure;\nexports.removeComment = removeComment;\nexports.removeCommentSuccess = removeCommentSuccess;\nexports.removeCommentFailure = removeCommentFailure;\nexports.fetchPosts = fetchPosts;\nexports.isFetching = isFetching;\nexports.isFetchingSuccess = isFetchingSuccess;\nexports.fetchPostsSuccess = fetchPostsSuccess;\nexports.fetchPostsFailure = fetchPostsFailure;\nexports.fetchCommentsSuccess = fetchCommentsSuccess;\nexports.fetchCommentsFailure = fetchCommentsFailure;\n\nvar _firebase = require('../config/firebase');\n\nvar _reactRouter = require('react-router');\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nvar shortid = require('shortid');\n\nfunction increment(index, postId) {\n  return function (dispatch) {\n    var postRef = _firebase.database.ref('posts/' + postId + '/likes');\n    postRef.transaction(function (likes) {\n      return (likes || 0) + 1;\n    }, function (err) {\n      if (err) dispatch(incrementFailure(err));else {\n        dispatch(incrementSuccess(index));\n      }\n    });\n  };\n}\n\nfunction incrementSuccess(index) {\n  return {\n    type: 'INCREMENT_LIKES_SUCCESS',\n    index: index\n  };\n}\n\nfunction incrementFailure(err) {\n  return {\n    type: 'INCREMENT_LIKES_FAILURE',\n    err: err\n  };\n}\n\nfunction addPost(display_src, caption) {\n  var postId = shortid.generate();\n  return function (dispatch) {\n    var postRef = _firebase.database.ref('posts/' + postId + '/');\n    postRef.set({\n      display_src: display_src,\n      caption: caption,\n      likes: 0\n    }, function (err) {\n      if (err) dispatch(addPostFailure(err));else {\n        dispatch(addPostSuccess(postId, display_src, caption));\n        _reactRouter.browserHistory.push('/view/' + postId);\n      }\n    });\n  };\n}\n\nfunction addPostSuccess(postId, display_src, caption) {\n  return {\n    type: 'ADD_POST_SUCCESS',\n    postId: postId,\n    display_src: display_src,\n    caption: caption\n  };\n}\n\nfunction addPostFailure(err) {\n  return {\n    type: 'ADD_POST_FAILURE',\n    err: err\n  };\n}\n\nfunction addComment(postId, author, comment) {\n  var commentId = shortid.generate();\n  return function (dispatch) {\n    // This is adding to database in wrong place.\n    // Reducer sets state in comments property of state\n    // using postId/code and adds commentId.\n    // Adding and removing from state this way works!\n    //\n    // This adds comment to DB under a commentId under comment\n    // under postId/code under posts!\n    // Why not change to how it's done in state?\n    // - need to fetch comments along with posts.\n    // - but dispatch two actions to update separate slices\n    // - of state.\n    var commentRef = _firebase.database.ref('comments/' + postId + '/' + commentId);\n    commentRef.set({\n      user: author, text: comment\n    }, function (err) {\n      if (err) dispatch(addCommentFailure(err));else {\n        dispatch(addCommentSuccess(postId, author, comment, commentId));\n      }\n    });\n  };\n}\n\nfunction addCommentSuccess(postId, author, comment, commentId) {\n  return {\n    type: 'ADD_COMMENT_SUCCESS',\n    postId: postId,\n    author: author,\n    comment: comment,\n    commentId: commentId\n  };\n}\n\nfunction addCommentFailure(err) {\n  return {\n    type: 'ADD_COMMENT_FAILURE',\n    err: err\n  };\n}\n\nfunction removeComment(postId, i, commentId) {\n  return function (dispatch) {\n    var commentRef = _firebase.database.ref('comments/' + postId + '/' + commentId);\n    commentRef.set({\n      user: null,\n      text: null,\n      commentId: null\n    }, function (err) {\n      if (err) dispatch(removeCommentFailure(err));else {\n        dispatch(removeCommentSuccess(postId, i));\n      }\n    });\n  };\n}\n\nfunction removeCommentSuccess(postId, i) {\n  return {\n    type: 'REMOVE_COMMENT_SUCCESS',\n    i: i,\n    postId: postId\n  };\n}\n\nfunction removeCommentFailure(err) {\n  return {\n    type: 'REMOVE_COMMENT_FAILURE',\n    err: err\n  };\n}\n\nfunction fetchPosts() {\n  var _this = this;\n\n  return function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(dispatch) {\n      var postsRef, db, postSnapshot, data, post, obj, commentsRef, _db, commentSnapshot, _data, postId, arr, comment;\n\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              dispatch(isFetching());\n\n              _context.prev = 1;\n              postsRef = _firebase.database.ref('posts');\n              _context.next = 5;\n              return postsRef.once('value');\n\n            case 5:\n              db = _context.sent;\n              postSnapshot = db.val();\n              data = [];\n\n              for (post in postSnapshot) {\n                obj = _extends({ code: post }, postSnapshot[post]);\n\n                data.push(obj);\n              }\n              dispatch(fetchPostsSuccess(data));\n              _context.next = 15;\n              break;\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context['catch'](1);\n\n              dispatch(fetchPostsFailure(_context.t0));\n\n            case 15:\n              _context.prev = 15;\n              commentsRef = _firebase.database.ref('comments');\n              _context.next = 19;\n              return commentsRef.once('value');\n\n            case 19:\n              _db = _context.sent;\n              commentSnapshot = _db.val();\n              _data = {};\n\n              for (postId in commentSnapshot) {\n                arr = [];\n\n                for (comment in commentSnapshot[postId]) {\n                  arr.push(commentSnapshot[postId][comment]);\n                }\n                _data[postId] = arr;\n              }\n              // console.log(data)\n              dispatch(fetchCommentsSuccess(_data));\n              _context.next = 29;\n              break;\n\n            case 26:\n              _context.prev = 26;\n              _context.t1 = _context['catch'](15);\n\n              dispatch(fetchCommentsFailure(_context.t1));\n\n            case 29:\n              dispatch(isFetchingSuccess());\n\n            case 30:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, _this, [[1, 12], [15, 26]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n}\n\nfunction isFetching() {\n  return {\n    type: 'IS_FETCHING'\n  };\n}\n\nfunction isFetchingSuccess() {\n  return {\n    type: 'IS_FETCHING_SUCCESS'\n  };\n}\n\nfunction fetchPostsSuccess(data) {\n  return {\n    type: 'FETCH_POSTS_SUCCESS',\n    data: data\n  };\n}\n\nfunction fetchPostsFailure(err) {\n  return {\n    type: 'FETCH_POSTS_FAILURE',\n    err: err\n  };\n}\n\nfunction fetchCommentsSuccess(data) {\n  return {\n    type: 'FETCH_COMMENTS_SUCCESS',\n    data: data\n  };\n}\n\nfunction fetchCommentsFailure(err) {\n  return {\n    type: 'FETCH_COMMENTS_FAILURE',\n    err: err\n  };\n}","map":null},"hash":"e68260adfe89075d27fdae83f93a17ac","cacheData":{"env":{}},"id":282}